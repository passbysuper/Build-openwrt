
name: Build OpenWRT In Docker

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      run_ssh:
        description: '开启SSH'
        required: false
        default: 'false'  # 默认不执行
        type: choice
        options:
          - 'false'
          - 'true'

  # 定时触发 (例如每天凌晨 1 点触发)
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  Building:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        #version: [immortalwrt, openwrt]
        version: [immortalwrt]
        #version: [openwrt]
        
        #branch: [openwrt-24.10, openwrt-23.10]  # 默认分支
        branch: [openwrt-24.10]
        
        # 如果 version 为 lede，默认分支将是 main，稍后调整
        platform: [x86_64]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set start time (Asia/Shanghai timezone)
        id: set_time
        run: |
          # 获取当前时间并格式化
          START_TIME_TAG=$(TZ="Asia/Shanghai" date +'%Y.%m.%d-%H_%M')
          START_TIME_RELEASE=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M')
          
          echo "Start time: $START_TIME_TAG"
               
          # 将时间设置为环境变量，供后续步骤使用
          echo "START_TIME_TAG=$START_TIME_TAG" >> $GITHUB_ENV
          echo "START_TIME_RELEASE=$START_TIME_RELEASE" >> $GITHUB_ENV          
        
      - name: Determine branch
        id: set_branch
        run: |
          if [[ "${{ matrix.version }}" == "immortalwrt" || "${{ matrix.version }}" == "openwrt" ]]; then
            echo "branch=${{ matrix.branch }}" >> $GITHUB_ENV
          elif [[ "${{ matrix.version }}" == "lede" ]]; then
            if [[ "${{ matrix.branch }}" == "openwrt-24.10" ]]; then
              echo "branch=master" >> $GITHUB_ENV
            else
              exit 0
            fi
          elif [[ "${{ matrix.version }}" == "lienol" ]]; then
            branch_name=$(echo "${{ matrix.branch }}" | sed 's/^openwrt-//')
            echo "branch=${branch_name}" >> $GITHUB_ENV
          fi

      - name: Determine url
        id: set_url
        run: |                 
          for N in {9..0}; do           
            platform="${{ matrix.platform }}"
            url="https://downloads.${{ matrix.version }}.org/releases/$(echo $branch | sed 's/^openwrt-//').${N}/targets/${platform//_/\/}/${{ matrix.version }}-imagebuilder-$(echo $branch | sed 's/^openwrt-//').${N}-${platform//_/-}.Linux-x86_64.tar.zst"
            echo "Checking ${url}..."
            
            # 使用 curl 检查网址是否有效
            if curl --head --silent --fail "$url" > /dev/null; then
              echo "Found valid URL: $url"
              imagebuilder_url=$url
              N=$N
              break
            else
              echo "URL not valid: $url"
            fi
          done
            
          echo "imagebuilder_url=$imagebuilder_url" >> $GITHUB_ENV
          echo "N=$N" >> $GITHUB_ENV
        
      - name: 查看机器配置  
        run: |  
          echo "警告⚠"  
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"  
          echo -e "CPU性能排序: 7763 > 8370C > 8272CL > 8171M > E5-2673\n"  
          echo "--------------------------CPU信息--------------------------"  
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"  
          echo "CPU核心数量: $(nproc)"  
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"  
          echo "--------------------------内存信息--------------------------"  
          echo "已安装内存详细信息:"  
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"  
          echo "--------------------------硬盘信息--------------------------"  
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT  

      - name: "Optimize Disk Space"
        if: false  # 跳过该步骤
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
        with:
          operate_sudo: "True"
          general_include: ".+"
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True" 
      
      - name: Show disk space
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      
      - name: Build ImmortalWrt
        run: |
          IMAGE_TAG="immortalwrt/imagebuilder:${{ matrix.platform//_/\/}}-openwrt-$(echo $branch | sed 's/^openwrt-//').${{ env.N }}"
          echo "Running docker with image tag: $IMAGE_TAG"
          docker run --rm -i \
                --user root \
                -v "./imagebuilder/bin:/home/build/immortalwrt/bin" \
                -v "./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/files:/home/build/immortalwrt/files" \
                -v "./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diy_ipk_from_release:/home/build/immortalwrt/diy_ipk_from_release" \
                -v "./${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diy_ipk_from_repositories:/home/build/immortalwrt/diy_ipk_from_repositories" \
                -v "./Patch:/home/build/immortalwrt/Patch" \
                $IMAGE_TAG /bin/bash -c "
                      /home/build/immortalwrt/diy_ipk_from_release &&
                      /home/build/immortalwrt/diy_ipk_from_repositories &&
                      /home/build/immortalwrt/Patch &&
                      /home/build/immortalwrt/build.sh
                "
          
      - name: MV Firmware
        run: |
          mkdir -p ./targets
          find ./imagebuilder/bin/targets/ -type f -exec mv {} ./targets/ \;


      - name: Create Git tag
        id: create_tag
        run: |
          # 设置标签名
          TAG_NAME_ENV="ENV：${{ env.START_TIME_TAG }}"
          RELEASE_NAME_ENV="ENV：${{ env.START_TIME_RELEASE }}"

          TAG_NAME_FM="FM：${{ env.START_TIME_TAG }}"
          RELEASE_NAME_FM="Firmware发布时间(UTC+8)：${{ env.START_TIME_RELEASE }}"
          
          # 输出标签名和发布名
          echo "TAG_NAME_ENV=$TAG_NAME_ENV" >> $GITHUB_ENV
          echo "RELEASE_NAME_ENV=$RELEASE_NAME_ENV" >> $GITHUB_ENV
          
          echo "TAG_NAME_FM=$TAG_NAME_FM" >> $GITHUB_ENV
          echo "RELEASE_NAME_FM=$RELEASE_NAME_FM" >> $GITHUB_ENV
          
          # 将标签名和发布名传递给后续步骤
          echo "TAG_NAME_ENV=${TAG_NAME_ENV}" >> $GITHUB_ENV
          echo "RELEASE_NAME_ENV=${RELEASE_NAME_ENV}" >> $GITHUB_ENV   
          
          echo "TAG_NAME_FM=${TAG_NAME_FM}" >> $GITHUB_ENV
          echo "RELEASE_NAME_FM=${RELEASE_NAME_FM}" >> $GITHUB_ENV 

      - name: Set up GitHub Release For Firmware
        id: create_release_for_firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME_FM }}
          name: ${{ env.RELEASE_NAME_FM }}
          files: |
            ./targets/*generic-squashfs-combined-efi.img.gz
            #./targets/*config.buildinfo
          body: "固件发布"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

  Clear:
    needs: Building
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
 
      - name: Delete releases tags and workflows runs
        uses: ophub/delete-releases-workflows@main
        with:
          #设置是否删除 releases 文件（选项：true/false），默认为 false。
          delete_releases: true
          #设置是否删除与 Releases 关联的 tags（选项：true/false），默认为 false。
          delete_tags: true
          #设置是否区分预发行版本（选项：all/true/false）。all表示全部类型，true/false代表仅删除标记为此类型的 releases 文件。默认为 all。
          prerelease_option: all
          #设置保留几个最新的 Releases 版本（整数。如：5），设置为 0 表示全部删除，默认保留 90 个。
          releases_keep_latest: 6
          #设置需要保留的 Releases 的 tags 关键字，多个关键字使用 / 分割（例如：book/tool），默认值 无。
          #releases_keep_keyword: 
          #设置是否删除 workflows 运行记录（选项：true/false），默认为 false。
          delete_workflows: true
          #设置保留几天以内的 workflows 记录（整数。如：30），设置为 0 表示全部删除。默认为 90 天。
          workflows_keep_day: 7
          #设置需要保留的 workflows 运行记录的名称关键字，多个关键字使用 / 分割（例如：book/tool），默认值 无。
          #workflows_keep_keyword:
          #设置是否输出详细的 json 日志（选项：true/false），默认值 false。
          #out_log: 
          #设置执行操作的 <owner>/<repo> ，默认为当前仓库。
          #repo: 
          gh_token: ${{ secrets.GITHUB_TOKEN }}
